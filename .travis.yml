sudo: required
services:
  - docker
env:
  global:
    - PORT=80
    - DOCKER_COMPOSE_VERSION=1.25.5
    - GOOGLE_APPLICATION_CREDENTIALS=${HOME}/.gcloud/keyfile.json
    - CC_TEST_REPORTER_ID=116e680b22e379b7a9da04e84696bc363d3e145776a92884de4b6b6b2a253fe5
install:
  # Set up docker-compose
  - sudo rm /usr/local/bin/docker-compose
  - sudo curl -L "https://github.com/docker/compose/releases/download/${DOCKER_COMPOSE_VERSION}/docker-compose-Linux-x86_64" -o /usr/local/bin/docker-compose
  - sudo chmod +x /usr/local/bin/docker-compose
  # Set up test coverage monitoring
  - curl -L https://codeclimate.com/downloads/test-reporter/test-reporter-latest-linux-amd64 > ./cc-test-reporter
  - chmod +x ./cc-test-reporter
before_script:
  - ./cc-test-reporter before-build

  # Pull & build images
  - docker pull cfranklin11/tipresias_backend:latest
  - docker pull cfranklin11/tipresias_frontend:latest
  - docker pull cfranklin11/tipresias_browser_test:latest
  - docker pull cfranklin11/tipresias_tipping:latest

  - docker build --cache-from cfranklin11/tipresias_backend:latest -t cfranklin11/tipresias_backend:latest ./backend
  - docker build --cache-from cfranklin11/tipresias_frontend:latest -t cfranklin11/tipresias_frontend:latest ./frontend
  - docker build --cache-from cfranklin11/tipresias_browser_test:latest -t cfranklin11/tipresias_browser_test:latest ./browser_test
  - docker build --cache-from cfranklin11/tipresias_tipping:latest -t cfranklin11/tipresias_tipping:latest ./tipping

  # We use gcloud/gsutil to upload screenshot artifacts on browser test failures,
  # so we have to add credentials before running system tests
  - openssl aes-256-cbc -K $encrypted_3b9f0b9d36d1_key -iv $encrypted_3b9f0b9d36d1_iv -in secrets.tar.enc -out secrets.tar -d
  - tar xvf secrets.tar
  - mkdir ${HOME}/.gcloud && mv keyfile.json ${GOOGLE_APPLICATION_CREDENTIALS}
  - mv deploy_rsa ${HOME}/.ssh/
  - mkdir ${HOME}/.aws && mv credentials ${HOME}/.aws/
script:
  # Python linting
  - docker run cfranklin11/tipresias_backend:latest pylint --disable=R server project scripts
  - docker run cfranklin11/tipresias_backend:latest pydocstyle server project scripts
  - docker run cfranklin11/tipresias_backend:latest mypy server project scripts
  - docker run cfranklin11/tipresias_tipping:latest pylint --disable=R src handler.py
  - docker run cfranklin11/tipresias_tipping:latest pydocstyle src handler.py
  - docker run cfranklin11/tipresias_tipping:latest mypy src handler.py

  # JS linting/tests
  - docker run cfranklin11/tipresias_frontend:latest yarn run eslint src
  - docker run cfranklin11/tipresias_frontend:latest yarn run flow
  - docker run -e CI=true cfranklin11/tipresias_frontend:latest yarn run test:unit


  # Integration/system tests
  - ./scripts/update_frontend_gql_types.sh docker-compose.ci.yml
  - ./scripts/integration_tests.sh docker-compose.ci.yml
  - ./scripts/browser_tests.sh docker-compose.ci.yml
  # Code coverage
  # Running code coverage commands in scripts instead of after_script,
  # because after_script silently fails, and I don't check codeclimate often enough
  # to catch problems early.
  # Only way I could get it to work was running format-coverage from each app's root.
  # Otherwise, it can't find files listed in coverage reports, because it uses $PWD,
  # and the --prefix option is to turn absolute paths into relative paths,
  # not to find files in subdirectories.
  # Also, trying to run the code coverage tool inside docker was more trouble than it's worth.
  - cd ./backend && ../cc-test-reporter format-coverage -t coverage.py -o ../coverage/codeclimate.backend.json && cd ..
  - cd ./tipping && ../cc-test-reporter format-coverage -t coverage.py -o ../coverage/codeclimate.tipping.json && cd ..
  # Need to move coverage files to frontend, because filenames are relative to frontend root
  - sudo chmod 755 ./browser_test && sudo mv ./browser_test/coverage ./frontend
  - cd ./frontend && ../cc-test-reporter format-coverage -t lcov -o ../coverage/codeclimate.frontend.json && cd ..
  - ./cc-test-reporter sum-coverage ./coverage/codeclimate.*.json -p 3
  - if [[ "$TRAVIS_TEST_RESULT" == 0 ]]; then ./cc-test-reporter upload-coverage; fi
before_deploy:
  - echo "$DOCKER_PASSWORD" | docker login -u cfranklin11 --password-stdin
  - docker push cfranklin11/tipresias_backend:latest
  - docker push cfranklin11/tipresias_tipping:latest
  - docker push cfranklin11/tipresias_frontend:latest
  - docker push cfranklin11/tipresias_browser_test:latest

deploy:
  provider: script
  script: ./scripts/deploy.sh
  on:
    branch: main
