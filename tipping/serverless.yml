# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: tipping
# app and org for use with dashboard.serverless.com
#app: your-app-name
#org: your-org-name

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
# frameworkVersion: "=X.X.X"

provider:
  name: aws
  runtime: python3.8
  timeout: 900
  stage: prod
  region: ap-southeast-2
  environment:
    PYTHON_ENV: production
    TIPRESIAS_APP: ${env:TIPRESIAS_APP}
    TIPRESIAS_APP_TOKEN: ${env:TIPRESIAS_APP_TOKEN}
    DATA_SCIENCE_SERVICE: ${env:DATA_SCIENCE_SERVICE}
    DATA_SCIENCE_SERVICE_TOKEN: ${env:DATA_SCIENCE_SERVICE_TOKEN}
    TIPPING_SERVICE_TOKEN: ${env:TIPPING_SERVICE_TOKEN}
    MONASH_USERNAME: ${env:MONASH_USERNAME}
    MONASH_PASSWORD: ${env:MONASH_PASSWORD}
    FOOTY_TIPS_USERNAME: ${env:FOOTY_TIPS_USERNAME}
    FOOTY_TIPS_PASSWORD: ${env:FOOTY_TIPS_PASSWORD}
    SPLASH_SERVICE: ${env:SPLASH_SERVICE}


plugins:
  - serverless-offline
  - serverless-python-requirements

custom:
  pythonRequirements:
    dockerizePip: false # We run sls inside Docker already

package:
  include:
    - handler.py
    - src/tipping/**
  exclude:
    - '**'

functions:
  update_fixture_data:
    handler: handler.update_fixture_data
    events:
      - schedule:
          rate: cron(0 7 ? * 1 *) # Monday morning
          enabled: true
  update_match_predictions:
    handler: handler.update_match_predictions
    events:
      - schedule:
          rate: cron(0 7 ? * 3-5 *) # Wednesday through Friday morning
          enabled: true
  update_match_results:
    handler: handler.update_match_results
    events:
      - schedule:
          rate: cron(0 7 ? * 2 *) # Tuesday morning
          enabled: true
  fetch_match_predictions:
    handler: handler.fetch_match_predictions
    events:
      - http:
          path: predictions
          method: get
  fetch_match_results:
    handler: handler.fetch_match_results
    events:
      - http:
          path: matches
          method: get
  fetch_ml_models:
    handler: handler.fetch_ml_models
    events:
      - http:
          path: ml_models
          method: get

#    The following are a few example events you can configure
#    NOTE: Please make sure to change your handler code to work with those events
#    Check the event documentation for details
#    events:
#      - http:
#          path: users/create
#          method: get
#      - websocket: $connect
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx
#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx
#      - iot:
#          sql: "SELECT * FROM 'some_topic'"
#      - cloudwatchEvent:
#          event:
#            source:
#              - "aws.ec2"
#            detail-type:
#              - "EC2 Instance State-change Notification"
#            detail:
#              state:
#                - pending
#      - cloudwatchLog: '/aws/lambda/hello'
#      - cognitoUserPool:
#          pool: MyUserPool
#          trigger: PreSignUp
#      - alb:
#          listenerArn: arn:aws:elasticloadbalancing:us-east-1:XXXXXX:listener/app/my-load-balancer/50dc6c495c0c9188/
#          priority: 1
#          conditions:
#            host: example.com
#            path: /hello

#    Define function environment variables here
#    environment:
#      variable2: value2

# you can add CloudFormation resource templates here
#resources:
#  Resources:
#    NewResource:
#      Type: AWS::S3::Bucket
#      Properties:
#        BucketName: my-new-bucket
#  Outputs:
#     NewOutput:
#       Description: "Description for the output"
#       Value: "Some output value"
